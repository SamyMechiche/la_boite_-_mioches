{% extends 'base.html.twig' %}

{% block title %}Messages - La Boîte à Mioches{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .messages-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .messages-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .messages-content {
            display: grid;
            grid-template-columns: 250px 1fr 1fr;
            gap: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .messages-sidebar {
            padding: 20px;
            border-right: 1px solid #eee;
        }
        .messages-list {
            padding: 20px;
            border-right: 1px solid #eee;
            max-height: 800px;
            overflow-y: auto;
        }
        .message-detail {
            padding: 20px;
        }
        .message-card {
            display: flex;
            padding: 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .message-card:hover {
            background-color: #f8f9fa;
        }
        .message-card.unread {
            background-color: #f0f7ff;
        }
        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            overflow: hidden;
            margin-right: 15px;
        }
        .message-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .message-content {
            flex: 1;
        }
        .message-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .message-preview {
            color: #666;
            font-size: 0.9em;
            margin: 0;
        }
        .message-actions {
            display: flex;
            gap: 10px;
        }
        .action-btn {
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            padding: 5px;
        }
        .action-btn:hover {
            color: #333;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }
        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background: white;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
        }
        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .modal-body {
            padding: 20px;
        }
        .modal-footer {
            padding: 20px;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #333;
        }
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            border: none;
            font-weight: 500;
        }
        .btn-primary {
            background: #007bff;
            color: white;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn:hover {
            opacity: 0.9;
        }
        .delete-mode .message-card {
            padding-left: 40px;
            position: relative;
        }
        .message-checkbox {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 20px;
        }
        .delete-actions {
            display: none;
            margin-top: 10px;
            text-align: right;
        }
        .delete-actions.active {
            display: block;
        }
        .messages-filters {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="messages-container">
    <div class="messages-header">
        <h1>My Messages</h1>
        <button class="btn btn-primary" onclick="openNewMessageModal()">
            <i class="fas fa-plus"></i> New Message
        </button>
    </div>

    <div class="messages-content">
        <div class="messages-sidebar">
            <div class="messages-filters">
                <button class="btn btn-secondary" onclick="filterMessages('all')">All Messages</button>
                <button class="btn btn-secondary" onclick="filterMessages('unread')">Unread</button>
                <button class="btn btn-secondary" onclick="toggleDeleteMode()">
                    <i class="fas fa-trash"></i> Delete Messages
                </button>
            </div>
        </div>

        <div class="messages-list">
            <div class="delete-actions" id="deleteActions">
                <button class="btn btn-primary" onclick="deleteSelectedMessages()">
                    <i class="fas fa-trash"></i> Delete Selected
                </button>
                <button class="btn btn-secondary" onclick="cancelDeleteMode()">
                    Cancel
                </button>
            </div>

            {% for message in messages %}
                <div class="message-card {% if not message.isRead and message.reciever == app.user %}unread{% endif %}" 
                     data-message-id="{{ message.id }}"
                     onclick="handleMessageClick(event, {{ message.id }})">
                    <input type="checkbox" class="message-checkbox" style="display: none;">
                    <div class="message-avatar">
                        <img src="{{ asset('img/avatar-placeholder.png') }}" alt="Sender Avatar">
                    </div>
                    <div class="message-content">
                        <div class="message-header">
                            <h3>{{ message.sender.fname }} {{ message.sender.lname }}</h3>
                            <span class="message-date">{{ message.sentAt|date('M d, Y - H:i') }}</span>
                        </div>
                        <p class="message-preview">{{ message.content|slice(0, 100) }}{% if message.content|length > 100 %}...{% endif %}</p>
                    </div>
                </div>
            {% else %}
                <div class="text-center py-4 text-gray-500">
                    <p>No messages yet.</p>
                </div>
            {% endfor %}
        </div>

        <div class="message-detail" id="messageDetail">
            <div class="text-center py-4 text-gray-500">
                <p>Select a message to view its details.</p>
            </div>
        </div>
    </div>
</div>

<!-- New Message Modal -->
<div class="modal" id="newMessageModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>New Message</h2>
            <button class="close-modal" onclick="closeNewMessageModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="newMessageForm" class="modal-body" onsubmit="sendMessage(event)">
            <div class="form-group">
                <label for="recipient">To:</label>
                <select id="recipient" name="recipient" required>
                    <option value="">Select a recipient...</option>
                    {% for recipient in recipients %}
                        <option value="{{ recipient.id }}">{{ recipient.name }} ({{ recipient.role }})</option>
                    {% endfor %}
                </select>
            </div>
            <div class="form-group">
                <label for="message">Message:</label>
                <textarea id="message" name="message" rows="8" required></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeNewMessageModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Send Message
                </button>
            </div>
        </form>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let isDeleteMode = false;

        function toggleDeleteMode() {
            isDeleteMode = !isDeleteMode;
            const messageList = document.querySelector('.messages-list');
            const deleteActions = document.getElementById('deleteActions');
            const checkboxes = document.querySelectorAll('.message-checkbox');
            
            messageList.classList.toggle('delete-mode');
            deleteActions.classList.toggle('active');
            
            checkboxes.forEach(checkbox => {
                checkbox.style.display = isDeleteMode ? 'block' : 'none';
                checkbox.checked = false;
            });

            // Reset background color of all message cards
            document.querySelectorAll('.message-card').forEach(card => {
                card.style.backgroundColor = '';
            });
        }

        function cancelDeleteMode() {
            isDeleteMode = false;
            const messageList = document.querySelector('.messages-list');
            const deleteActions = document.getElementById('deleteActions');
            const checkboxes = document.querySelectorAll('.message-checkbox');
            
            messageList.classList.remove('delete-mode');
            deleteActions.classList.remove('active');
            
            checkboxes.forEach(checkbox => {
                checkbox.style.display = 'none';
                checkbox.checked = false;
            });

            // Reset background color of all message cards
            document.querySelectorAll('.message-card').forEach(card => {
                card.style.backgroundColor = '';
            });
        }

        function handleMessageClick(event, messageId) {
            if (isDeleteMode) {
                // Prevent the default click behavior when in delete mode
                event.preventDefault();
                event.stopPropagation();
                
                const messageCard = event.currentTarget;
                const checkbox = messageCard.querySelector('.message-checkbox');
                checkbox.checked = !checkbox.checked;
                
                // Add visual feedback for selected messages
                messageCard.style.backgroundColor = checkbox.checked ? '#f0f0f0' : '';
            } else {
                showMessage(messageId);
            }
        }

        async function deleteSelectedMessages() {
            const selectedMessages = Array.from(document.querySelectorAll('.message-checkbox:checked'))
                .map(checkbox => checkbox.closest('.message-card').dataset.messageId);

            if (selectedMessages.length === 0) {
                alert('Please select messages to delete');
                return;
            }

            if (!confirm(`Are you sure you want to delete ${selectedMessages.length} message(s)?`)) {
                return;
            }

            try {
                const response = await fetch('{{ path('app_message_delete') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        messageIds: selectedMessages
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Remove deleted messages from the UI
                    selectedMessages.forEach(id => {
                        const messageCard = document.querySelector(`.message-card[data-message-id="${id}"]`);
                        if (messageCard) {
                            messageCard.remove();
                        }
                    });

                    // Exit delete mode
                    cancelDeleteMode();

                    // Show success message
                    alert(`Successfully deleted ${data.deletedCount} message(s)`);
                } else {
                    alert('Error deleting messages');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting messages');
            }
        }

        function openNewMessageModal() {
            document.getElementById('newMessageModal').classList.add('active');
        }

        function closeNewMessageModal() {
            document.getElementById('newMessageModal').classList.remove('active');
            document.getElementById('newMessageForm').reset();
        }

        async function sendMessage(event) {
            event.preventDefault();
            const form = event.target;
            const recipientId = form.recipient.value;
            const content = form.message.value;

            try {
                const response = await fetch('{{ path('app_message_send') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        recipientId: recipientId,
                        content: content
                    })
                });

                const data = await response.json();
                if (data.success) {
                    closeNewMessageModal();
                    window.location.reload();
                } else {
                    alert(data.error || 'Failed to send message');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to send message');
            }
        }

        async function showMessage(messageId) {
            try {
                const response = await fetch(`/message/${messageId}/read`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const messageCard = document.querySelector(`[data-message-id="${messageId}"]`);
                    messageCard.classList.remove('unread');
                }
            } catch (error) {
                console.error('Error marking message as read:', error);
            }
        }
    </script>
{% endblock %}
